// Per-day schedule (Mon-Fri dose days; Sat/Sun no dose)
const DAILY_PLANS={"Mon":[["06:15","Wake up, hydrate (16–20 oz water)"],["06:30","Workout – Strength training (full body, 45–60 min) – fasted or with small protein"],["07:45","Post-workout: 25–30 g protein + small carbs (banana, berries)"],["10:30","Snack: Protein + fats (e.g., turkey + avocado)"],["13:00","Lunch: Lean protein + moderate carbs + veggies"],["16:30","Snack: Protein + veggies or nuts"],["19:00","Dinner: Lean protein + low-carb veggies + healthy fats"],["21:45","No food after this time"],["22:30","Sermorelin 40 mg"],["22:35","Sleep"]],"Tue":[["06:15","Wake up, hydrate"],["06:30","Workout – HIIT (15–20 min) + core"],["06:55","Post-workout: Protein + small carbs"],["10:00","Snack: Protein + fats"],["13:00","Lunch: Lean protein + moderate carbs"],["16:00","Snack: Protein + veggies"],["19:00","Dinner: Protein + greens + olive oil"],["21:45","No food after this time"],["22:30","Sermorelin 40 mg"]],"Wed":[["06:15","Wake up, hydrate"],["06:30","Workout – Upper body (45 min) + 20 min steady cardio"],["07:45","Post-workout: Protein + moderate carbs"],["10:30","Snack: Protein + fats"],["13:00","Lunch: Lean protein + moderate carbs"],["16:30","Snack: Protein + veggies"],["19:00","Dinner: Lean protein + low-carb veggies + fats"],["21:45","No food after this time"],["22:30","Sermorelin 40 mg"]],"Thu":[["06:15","Wake up, hydrate"],["06:30","Workout – HIIT (15 min) or sprints"],["06:50","Post-workout: Protein + small carbs"],["10:00","Snack: Protein + fats"],["13:00","Lunch: Lean protein + moderate carbs"],["16:00","Snack: Protein + veggies"],["19:00","Dinner: Protein + greens + olive oil"],["21:45","No food"],["22:30","Sermorelin 40 mg"]],"Fri":[["06:15","Wake up, hydrate"],["06:30","Workout – Lower body (45 min) + 20–30 min steady cardio"],["07:45","Post-workout: Protein + moderate carbs"],["10:30","Snack: Protein + fats"],["13:00","Lunch: Lean protein + moderate carbs"],["16:30","Snack: Protein + veggies"],["19:00","Dinner: Lean protein + low-carb veggies + fats"],["21:45","No food"],["22:30","Sermorelin 40 mg"]],"Sat":[["07:00","Wake up, hydrate"],["07:30","Fasted walk (20–30 min) or yoga"],["09:00","Breakfast: Protein + fats"],["12:30","Lunch: Protein + greens"],["18:00","Dinner: Protein + veggies"],["","Notes: Low‑carb day"]],"Sun":[["08:00","Wake up, hydrate"],["Morning","Light mobility or leisure activity"],["All day","Protein‑focused meals, moderate fats, low carbs"],["Evening","Light dinner, no food 2 hrs before bed"]]};
const WEEK_META={"Mon":{training:"Full Body Strength",dose:true,cardio:"—",nutrition:"Mod carbs post‑workout"},"Tue":{training:"HIIT + Core",dose:true,cardio:"—",nutrition:"Low carb PM"},"Wed":{training:"Upper + Cardio",dose:true,cardio:"20 min steady",nutrition:"Mod carbs post‑workout"},"Thu":{training:"HIIT",dose:true,cardio:"—",nutrition:"Low carb PM"},"Fri":{training:"Lower + Cardio",dose:true,cardio:"20–30 min steady",nutrition:"Mod carbs post‑workout"},"Sat":{training:"Active Recovery",dose:false,cardio:"Fasted walk",nutrition:"Low carb day"},"Sun":{training:"Rest",dose:false,cardio:"Light walk (opt.)",nutrition:"Low carb day"}};
function loadState(){try{return JSON.parse(localStorage.getItem("mfl_v2")||"{}")}catch(e){return {}}}
function saveState(s){localStorage.setItem("mfl_v2",JSON.stringify(s))}
function todayKey(){return new Date().toISOString().slice(0,10)}
function weekdayShort(d){return["Sun","Mon","Tue","Wed","Thu","Fri","Sat"][d.getDay()]}
function toHuman(hm){if(!hm)return"";if(hm==="Morning"||hm==="All day"||hm==="Evening")return hm;const [h,m]=hm.split(":").map(n=>parseInt(n,10));const d=new Date();d.setHours(h);d.setMinutes(m);return d.toLocaleTimeString([], {hour:"numeric", minute:"2-digit"})}
function initDefaults(){const s=loadState();if(!s.checks)s.checks={};if(!s.water)s.water={};if(!s.streak)s.streak=0;saveState(s)}
function renderToday(){const s=loadState();const now=new Date();const wk=weekdayShort(now);document.getElementById("dayLabel").textContent=now.toLocaleDateString(undefined,{weekday:"long"});document.getElementById("planLabel").textContent="• "+WEEK_META[wk].training+(WEEK_META[wk].dose?" • Dose day":" • No dose");document.getElementById("streakCount").textContent=s.streak||0;const list=document.getElementById("timeline");list.innerHTML="";const dayData=DAILY_PLANS[wk];const dk=todayKey();const checks=s.checks[dk]||{};dayData.forEach(([time,text],idx)=>{const li=document.createElement("li");const row=document.createElement("div");row.className="task";const cb=document.createElement("input");cb.type="checkbox";const key=`${wk}-${idx}`;cb.checked=!!checks[key];cb.addEventListener("change",()=>{const st=loadState();st.checks[dk]=st.checks[dk]||{};st.checks[dk][key]=cb.checked;saveState(st);updateProgress()});const content=document.createElement("div");content.innerHTML=`<div class="time">${toHuman(time)}</div><div class="desc">${text}</div>`;const badge=document.createElement("div");badge.className="badge";badge.textContent="Today";row.append(cb,content,badge);li.append(row);list.append(li)});renderWater();updateProgress()}
function renderWater(){const s=loadState();const dk=todayKey();const wrap=document.getElementById("waterDrops");wrap.innerHTML="";const goal=8;const filled=s.water[dk]||0;for(let i=0;i<goal;i++){const b=document.createElement("button");b.type="button";b.className="drop"+(i<filled?" filled":"");b.addEventListener("click",()=>{const st=loadState();const cur=st.water[dk]||0;st.water[dk]=(i<cur)?i:i+1;saveState(st);renderWater();updateProgress()});wrap.appendChild(b)}}
function updateWeekGrid(){const wrap=document.getElementById("weekGrid");wrap.innerHTML="";const head=document.createElement("div");head.className="row head";["Day","Dose","Workout","Cardio","Nutrition"].forEach(t=>{const c=document.createElement("div");c.textContent=t;head.appendChild(c)});wrap.appendChild(head);const today=new Date();const monday=new Date(today);const day=monday.getDay();const diffToMon=(day===0?-6:1)-day;monday.setDate(today.getDate()+diffToMon);for(let i=0;i<7;i++){const d=new Date(monday);d.setDate(monday.getDate()+i);const wk=weekdayShort(d);const meta=WEEK_META[wk];const row=document.createElement("div");row.className="row";[d.toLocaleDateString(undefined,{weekday:"short"}),meta.dose?"✔":"❌",meta.training,meta.cardio,meta.nutrition].forEach(t=>{const c=document.createElement("div");c.textContent=t;row.appendChild(c)});wrap.appendChild(row)}}
function updateProgress(){const s=loadState();const dk=todayKey();const checks=s.checks[dk]||{};const completed=Object.values(checks).filter(Boolean).length;const water=(s.water[dk]||0)/8;const maxTasks=(DAILY_PLANS[weekdayShort(new Date())]||[]).length;const pct=Math.min(1,(completed/(maxTasks||1))*0.8+water*0.2);const fill=document.getElementById("progressFill");if(fill)fill.style.width=(pct*100).toFixed(0)+"%"}
function initTabs(){document.querySelectorAll(".tabbar button").forEach(btn=>{btn.addEventListener("click",()=>{document.querySelectorAll(".view").forEach(v=>v.classList.remove("active"));document.getElementById(btn.dataset.target).classList.add("active");document.querySelectorAll(".tabbar button").forEach(b=>b.classList.remove("active"));btn.classList.add("active");if(btn.dataset.target==="view-week"){updateWeekGrid();updateProgress()}})})}
function initTimeEditor(){const dialog=document.getElementById("timeEditor");document.getElementById("editTimesBtn").addEventListener("click",()=>{const wk=weekdayShort(new Date());const list=DAILY_PLANS[wk];const form=document.getElementById("timeForm");form.innerHTML="";list.forEach(([time,text],i)=>{const row=document.createElement("div");row.className="row";row.innerHTML=`<input type="text" value="${text.replace(/"/g,'&quot;')}" data-i="${i}" data-k="text"><input type="text" value="${time}" data-i="${i}" data-k="time">`;form.appendChild(row)});dialog.showModal()});dialog.addEventListener("close",()=>{if(dialog.returnValue==="save"){const wk=weekdayShort(new Date());const inputs=dialog.querySelectorAll("[data-i]");const items=DAILY_PLANS[wk];inputs.forEach(inp=>{const i=+inp.dataset.i,k=inp.dataset.k;if(k==="time"){items[i][0]=inp.value.trim()}else{items[i][1]=inp.value.trim()}});renderToday();updateWeekGrid()}})}
function registerSW(){if("serviceWorker"in navigator){navigator.serviceWorker.register("./service-worker.js").catch(()=>{})}}
initDefaults();initTabs();initTimeEditor();renderToday();updateWeekGrid();registerSW();
document.getElementById("resetWeekBtn").addEventListener("click",()=>{localStorage.removeItem("mfl_v2");initDefaults();renderToday();updateWeekGrid()});
